<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace必须指向Dao接口 -->
<mapper namespace="com.lex.webside.showcase.mybatis_spring.UserMapper">
	<!--
		获取用户: 输出直接映射到对象, login_name列要"as loginName"以方便映射 ,team_id as "team.id"创建team对象并赋值
	-->
	<select id="get" parameterType="int" resultType="User">
		select id, name, login_name as loginName, group_id AS "group.id"
		from users
		where id=#{id}
	</select>
	<!--
	   TODO
		获取用户列表: 输出直接映射到对象, login_name列要"as loginName"以方便映射 ,team_id as "team.id"创建team对象并赋值-->
	<select id="findAll" resultType="User">
		select id, name,
		login_name as loginName
		<!-- ,
		group_id as "group.id" -->
		from users
	</select>
	<!--
	   TODO
		获取用户列表: 输出直接映射到对象, login_name列要"as loginName"以方便映射 ,team_id as "team.id"创建team对象并赋值-->
	<!--<select id="findWithPagination" parameterType="UserReq" resultType="User">
		select id, name,
		login_name as loginName
		&lt;!&ndash; ,
		group_id as "group.id" &ndash;&gt;
		from users
	</select>-->

    <resultMap type="User" id="userList">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="login_name" property="loginName"/>
        <!-- <result column="group_id" property="group_id"/> -->
    </resultMap>
    <select id="getUsers" parameterType="string" resultMap="userList">
        select * from users where login_name like #{loginName}
    </select>

	<!-- 查询用户,演示: 1.输入用map传入多个参数 2.<where>语句, 智能添加where和and关键字 3.输出直接映射对象
	<select id="search" parameterType="map" resultType="User">
		select id, name, email,
		login_name as loginName,
		team_id as "team.id"
		from ss_user
		<where>
			<if test="loginName != null">
				login_name=#{loginName}
			</if>
			<if test="name != null">
				and name=#{name}
			</if>
		</where>
	</select> -->

	<!-- 插入用户： 1.由数据库生成id并赋值到user对象 2.输入用对象, 嵌套属性表达式#{team.id} -->
	<insert id="save" parameterType="User" useGeneratedKeys="true" keyProperty="id">
		insert into users (
		login_name, name
		<!-- , group_id -->
		)
		values (
		#{loginName}, #{name}
		<!-- ,
		#{team.id} -->
		)
	</insert>

    <insert id="batchInsert" parameterType="java.util.List"
     >
     <!-- useGeneratedKeys="true" keyProperty="id" -->
        insert into users (
        login_name, name
        <!-- , group_id -->
        )
        values
        <foreach collection="list" item="item" index="index" separator=",">
        ( #{item.loginName}, #{item.name} )
        </foreach>
    </insert>

    <update id="update" parameterType="User">
        update users set
        login_name = #{loginName}, name = #{name}
        <!-- , group_id -->
        <!-- ,
        #{team.id} -->
        where id = #{id}
    </update>

	<!-- 删除用户 -->
	<delete id="delete" parameterType="int">
	     delete from users where id=#{id}
	</delete>
</mapper> 
